[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 30, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJul 27, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nDH140_Final_Project\n\n\n\n\n\nSpotify Top 1525 Streamed Songs Analysis\n\n\n\n\n\n\nJul 26, 2023\n\n\nPatrick KHoury\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/DH140_FinalProject.html",
    "href": "posts/DH140_FinalProject.html",
    "title": "DH140_Final_Project",
    "section": "",
    "text": "Importing Data\n\n\nimport pandas as pd\n\n# Must put client ID / client Secret in different text file to not compromise information\nimport sys\nsys.path.append('/home/jovyan')\nimport spotify_key\n\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\n# Call the separate text file info for client ID/ client secret\nsp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=spotify_key.SPOTIPY_CLIENT_ID,\n                                                          client_secret=spotify_key.SPOTIPY_CLIENT_SECRET))\n\ndef call_playlist(creator, playlist_id):\n    \n    #General Pandas df\n\n    playlist_audio_features_list = [\"artist\",\"album\",\"track_name\",\"track_id\",\"danceability\",\"energy\",\"key\",\"loudness\",\"mode\", \"speechiness\",\"instrumentalness\",\"liveness\",\"valence\",\"tempo\", \"duration_ms\",\"time_signature\"]\n    \n    playlist_df = pd.DataFrame(columns = playlist_audio_features_list)\n    \n    #Getting Information\n    \n    playlist = sp.user_playlist_tracks(creator, playlist_id)[\"items\"]\n    for track in playlist:\n      \n        # Create empty dict\n        playlist_audio_features = {}\n        # Get artist, album, track name, track id\n        playlist_audio_features[\"artist\"] = track[\"track\"][\"album\"][\"artists\"][0][\"name\"]\n        playlist_audio_features[\"album\"] = track[\"track\"][\"album\"][\"name\"]\n        playlist_audio_features[\"track_name\"] = track[\"track\"][\"name\"]\n        playlist_audio_features[\"track_id\"] = track[\"track\"][\"id\"]\n        \n        # Get audio features utilizing API\n        audio_features = sp.audio_features(playlist_audio_features[\"track_id\"])[0]\n        for feature in playlist_audio_features_list[4:]:\n            playlist_audio_features[feature] = audio_features[feature]\n        \n        # Concat the dfs\n        track_df = pd.DataFrame(playlist_audio_features, index = [0])\n        playlist_df = pd.concat([playlist_df, track_df], ignore_index = True)\n\n    # Function commands done\n        \n    return playlist_df\n  \nplaylist1 = call_playlist(\"patrick khoury\",\"5bKOCJ2v5M9KQtv8Po7u62\")\n\n\n\nOrganizing and Merging Data\n\n# Data Frame 2 with # Of Streams, Year, Genre\n \nimport pandas as pd\nimport numpy as np\nStreams_genres_year_df = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vS5ctdm3QExzmFq0Y56b2RicAy9h3iFQLocFMmdtz2gXZthg7ttw39ZCpPz73h2Zwa32qwfER85MLlz/pub?gid=0&single=true&output=csv')\n\nconditions = [\n  (Streams_genres_year_df['Year'] &gt;= 2020), \n  (Streams_genres_year_df['Year'] &lt; 2020) & (Streams_genres_year_df['Year'] &gt;= 2015),\n  (Streams_genres_year_df['Year'] &lt; 2015) & (Streams_genres_year_df['Year'] &gt;= 2010),\n  (Streams_genres_year_df['Year'] &lt; 2010) & (Streams_genres_year_df['Year'] &gt;= 2005),\n  (Streams_genres_year_df['Year'] &lt; 2005) & (Streams_genres_year_df['Year'] &gt;= 2000),\n  (Streams_genres_year_df['Year'] &lt; 2000) & (Streams_genres_year_df['Year'] &gt;= 1995),\n  (Streams_genres_year_df['Year'] &lt; 1995) & (Streams_genres_year_df['Year'] &gt;= 1990),\n  (Streams_genres_year_df['Year'] &lt; 1990) & (Streams_genres_year_df['Year'] &gt;= 1985),\n  (Streams_genres_year_df['Year'] &lt; 1985) & (Streams_genres_year_df['Year'] &gt;= 1980),\n  (Streams_genres_year_df['Year'] &lt; 1980) & (Streams_genres_year_df['Year'] &gt;= 1975),\n  (Streams_genres_year_df['Year'] &lt; 1975) & (Streams_genres_year_df['Year'] &gt;= 1970)\n]\n\nvalues = ['Early 2020s', 'Late 2010s', 'Early 2010s', 'Late 2000s', 'Early 2000s', 'Late 1990s', 'Early 1990s', 'Late 1980s', 'Early 1980s', 'Late 1970s', 'Early 1970s']\n\nStreams_genres_year_df['Decade'] = np.select(conditions, values)\n  \n  \n# Streams_genres_year_df -- used as check, calling data frame\n\n# Merging Data Frame 1 with Data Frame 2\n\ncombine_df = [playlist1, Streams_genres_year_df]\n\nfinal_df = pd.concat(combine_df, axis=1)\n\n\n\n\nCleaning final_df Data\n\n# Checking for null values:\n\nfinal_df.isnull().sum()\n\nartist              0\nalbum               0\ntrack_name          0\ntrack_id            0\ndanceability        0\nenergy              0\nkey                 0\nloudness            0\nmode                0\nspeechiness         0\ninstrumentalness    0\nliveness            0\nvalence             0\ntempo               0\nduration_ms         0\ntime_signature      0\nStreams             0\nGenre               0\nYear                0\nDecade              0\ndtype: int64\n\n\n\n# Checking for duplicates:\n\nfinal_df.duplicated().value_counts()\n\n# The current list only features the top 100 songs. The spotify api/the most \n# streamed list featured duplicates of certain songs. These duplicates will\n# be dropped from the data frame when all songs are included in the df.\n\nFalse    100\ndtype: int64\n\n\n\n\nProcessing Data\n\n# Print final pandas data frame to demonstrate that the two lists have been\n# combined\n\nfinal_df\n\n\n\n\n\n\n\n\nartist\nalbum\ntrack_name\ntrack_id\ndanceability\nenergy\nkey\nloudness\nmode\nspeechiness\ninstrumentalness\nliveness\nvalence\ntempo\nduration_ms\ntime_signature\nStreams\nGenre\nYear\nDecade\n\n\n\n\n0\nThe Weeknd\nAfter Hours\nBlinding Lights\n0VjIjW4GlUZAMYd2vXMi3b\n0.514\n0.730\n1\n-5.934\n1\n0.0598\n0.000095\n0.0897\n0.334\n171.005\n200040\n4\n3,703,895,074\nR&B/Soul\n2020\nEarly 2020s\n\n\n1\nEd Sheeran\n÷ (Deluxe)\nShape of You\n7qiZfU4dY1lWllzX7mPBI3\n0.825\n0.652\n1\n-3.183\n0\n0.0802\n0.000000\n0.0931\n0.931\n95.977\n233713\n4\n3,562,543,890\nPop\n2017\nLate 2010s\n\n\n2\nLewis Capaldi\nDivinely Uninspired To A Hellish Extent\nSomeone You Loved\n7qEHsqek33rTcFNT9PFqLf\n0.501\n0.405\n1\n-5.679\n1\n0.0319\n0.000000\n0.1050\n0.446\n109.891\n182161\n4\n2,887,241,814\nPop\n2019\nLate 2010s\n\n\n3\nTones And I\nDance Monkey (Stripped Back) / Dance Monkey\nDance Monkey\n2XU0oxnq2qxCpomAAuJY8K\n0.824\n0.588\n6\n-6.400\n0\n0.0924\n0.000104\n0.1490\n0.513\n98.027\n209438\n4\n2,864,791,672\nPop\n2019\nLate 2010s\n\n\n4\nVarious Artists\nSpider-Man: Into the Spider-Verse (Soundtrack ...\nSunflower - Spider-Man: Into the Spider-Verse\n3KkXRkHbMCARz0aVfEt68P\n0.760\n0.479\n2\n-5.574\n1\n0.0466\n0.000000\n0.0703\n0.913\n89.911\n158040\n4\n2,808,096,550\nHip-Hop\n2018\nLate 2010s\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n95\nQueen\nJazz\nDon't Stop Me Now\n43DHLzDkncpby82Po5jlOZ\n0.561\n0.757\n5\n-10.061\n1\n0.1920\n0.001270\n0.5580\n0.640\n156.432\n209560\n4\n1,646,040,433\nRock\n1979\nLate 1970s\n\n\n96\nBruno Mars\nDoo-Wops & Hooligans\nJust the Way You Are\n7BqBn9nzAq8spo5e7cZ0dJ\n0.635\n0.841\n5\n-5.379\n1\n0.0422\n0.000000\n0.0622\n0.424\n109.021\n220734\n4\n1,645,175,247\nPop\n2010\nEarly 2010s\n\n\n97\nLuis Fonsi\nVIDA\nDespacito\n6habFhsOp2NvshLv26DqMb\n0.655\n0.797\n2\n-4.787\n1\n0.1530\n0.000000\n0.0670\n0.839\n177.928\n229360\n4\n1,639,266,003\nReggaeton\n2017\nLate 2010s\n\n\n98\nWiz Khalifa\nSee You Again (feat. Charlie Puth)\nSee You Again (feat. Charlie Puth)\n2JzZzZUQj3Qff7wapcbKjc\n0.689\n0.481\n10\n-7.503\n1\n0.0815\n0.000001\n0.0649\n0.283\n80.025\n229526\n4\n1,635,982,575\nPop\n2015\nLate 2010s\n\n\n99\nJason Mraz\nWe Sing. We Dance. We Steal Things.\nI'm Yours\n1EzrEOXmMH3G43AXT1y7pA\n0.703\n0.444\n11\n-9.331\n1\n0.0417\n0.000000\n0.0973\n0.712\n150.960\n242947\n4\n1,635,864,522\nReggae\n2008\nLate 2000s\n\n\n\n\n100 rows × 20 columns\n\n\n\n\n\nExploratory Statistical Analysis\n\nimport matplotlib.pyplot as plt\n\n# Most Represented Artists\nartists_by_song=final_df.groupby(['artist'], as_index=False).count().sort_values(by='track_name', ascending=False).head(25)\n\nx = artists_by_song['artist']\ny = artists_by_song['track_name']\n\nplt.bar(x, y, color= 'purple')\nplt.title('Top 30 Most Represented Artists, by Song', fontweight='bold')\nplt.xlabel('Artist')\nplt.ylabel('Number of Songs')\nplt.xticks(rotation='vertical')\nplt.show()\n\n\n\n\n\n# Most Represented Albums\nalbum_by_song=final_df.groupby(['album'], as_index=False).count().sort_values(by='track_name', ascending=False).head(25)\n\nx = album_by_song['album']\ny = album_by_song['track_name']\n\nplt.bar(x, y, color= 'purple')\nplt.title('Top 30 Most Represented Albums, by Song', fontweight='bold')\nplt.xlabel('Album')\nplt.ylabel('Number of Songs')\nplt.xticks(rotation='vertical')\nplt.show()\n\n\n\n\n\nfix artists by total stream counts\n\n# Artists by stream count (List and Bar Chart)\n\n# Most Represented Artists\n# artists_by_streams=final_df.groupby(['Streams'], as_index=False).count().sum().sort_values(by='Streams', ascending=False).head(25)\n\n# x = artists_by_streams['artist']\n# y = artists_by_streams['Streams']\n\n# plt.bar(x, y, color= 'purple')\n# plt.title('Top 30 Most Represented Artists, by Song', fontweight='bold')\n# plt.xlabel('Artist')\n# plt.ylabel('Number of Songs')\n# plt.xticks(rotation='vertical')\n# plt.show()\n\n\n\nFIX PIE CHART\n\n# Pie Chart Sorted by Genre (List and Pie Chart)\n\n# Most Represented Albums\ngenre_by_song=final_df.groupby(['Genre'], as_index=False).count().sort_values(by='track_name', ascending=False).head(7)\n\nx = genre_by_song['Genre']\ny = genre_by_song['track_name']\n\nplt.pie(y)\nplt.title('Genre Disribution', fontweight='bold')\nplt.show()\n\n\n\n\n\n\n# Sort By Eras (List and Bar Chart)\n\ndecade_by_song=final_df.groupby(['Decade'], as_index=False).count().sort_values(by='track_name', ascending=False).head(25)\n\nx = decade_by_song['Decade']\ny = decade_by_song['track_name']\n\nplt.bar(x, y, color= 'purple')\nplt.title('Most Represented Eras, by Song Frequency', fontweight='bold')\nplt.xlabel('Era')\nplt.ylabel('Number of Songs')\nplt.xticks(rotation='vertical')\nplt.show()\n\n\n\n\n\n\n\nmake following plots all in same subplot\n\n# Histogram of all of the different metrics\n\nimport matplotlib.pyplot as plt\n\n# Danceability\nplt.hist(final_df['danceability'], bins=20)\nplt.xlabel('Danceability')\nplt.ylabel('Frequency')\nplt.title('Distribution of Song Danceability')\nplt.show()\n\n# Energy\nplt.hist(final_df['energy'], bins=20)\nplt.xlabel('Energy')\nplt.ylabel('Frequency')\nplt.title('Distribution of Song Energy')\nplt.show()\n\n# Valence\nplt.hist(final_df['valence'], bins=20)\nplt.xlabel('Valence')\nplt.ylabel('Frequency')\nplt.title('Distribution of Song Valence')\nplt.show()\n\n# Tempo\nplt.hist(final_df['tempo'], bins=20)\nplt.xlabel('Tempo (BPM)')\nplt.ylabel('Frequency')\nplt.title('Distribution of Song Tempo')\nplt.show()\n\n# Speechiness\nplt.hist(final_df['speechiness'], bins=20)\nplt.xlabel('Speechiness')\nplt.ylabel('Frequency')\nplt.title('Distribution of Speechiness')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFocused Analysis that Answers Questions\n\n# What is the relationship between key attributes and song popularity\n\n\n# How do these attributes change depending on the genre of music and era\n\n\n# Are the attributes of popular spotify songs consistent with the attributes \n# of average songs of the same genre and era\n\nfinal_df.describe()\n\n\n\n\n\n\n\n\ndanceability\nenergy\nloudness\nspeechiness\ninstrumentalness\nliveness\nvalence\ntempo\nYear\n\n\n\n\ncount\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n100.000000\n\n\nmean\n0.657080\n0.622630\n-6.113580\n0.090671\n0.003161\n0.158887\n0.490362\n120.686560\n2014.740000\n\n\nstd\n0.136805\n0.165219\n2.026686\n0.084304\n0.018625\n0.123541\n0.224446\n29.970898\n7.574039\n\n\nmin\n0.351000\n0.264000\n-10.965000\n0.023200\n0.000000\n0.034400\n0.061200\n72.795000\n1975.000000\n\n\n25%\n0.562500\n0.518500\n-7.224000\n0.041200\n0.000000\n0.093475\n0.333250\n98.001500\n2014.000000\n\n\n50%\n0.679500\n0.636000\n-5.763500\n0.057100\n0.000000\n0.111000\n0.474500\n116.417000\n2017.000000\n\n\n75%\n0.759250\n0.760500\n-4.731500\n0.095625\n0.000056\n0.164750\n0.662000\n144.441000\n2018.250000\n\n\nmax\n0.921000\n0.922000\n-2.749000\n0.438000\n0.134000\n0.790000\n0.969000\n186.003000\n2022.000000\n\n\n\n\n\n\n\n\nHow I’m going to answer my research questions:\nWhat is the relationship between key attributes and song popularity:\n– correlation graph, plot streams on spotify vs the key attributes: energy, danceability, speechiness, valence, tempo\nHow do these attributes change depending on the genre of music and era:\n– compare and graph average attributes across different genres of music and era provided in the text.\nAre the attributes of popular spotify songs consistent with the attributes of average songs of the same genre and era:\n– utilize df.describe() with specific genres and eras to ge the mean values of certain attributes from this list and compare them to the mean values of the average songs of the same genre and era. In doing this, I will be able to compare these top hits with the average song in the same category to determine whether these songs do anything specifically different which may contribute to their popular status. i.e. Rock songs on this list might show that they have with higher than average energy or lower than average instrumentalness when compared to the average rock song."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]